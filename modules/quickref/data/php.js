/**
 * PHP 快速参考数据
 * 基于 quickref.me 的 PHP 参考内容
 */

const PHP_CHEATSHEET = {
    id: 'php',
    title: 'PHP',
    description: 'PHP 是一种广泛使用的开源通用脚本语言，特别适合Web开发',
    icon: '🐘',
    category: 'backend',
    sections: [
        {
            title: '基础语法',
            items: [
                {
                    title: 'PHP标签和基本语法',
                    description: 'PHP代码的基本结构',
                    code: '<?php\n// PHP开始标签\necho "Hello, World!";\n\n// 变量\n$name = "Alice";\n$age = 25;\n$height = 5.6;\n$isStudent = true;\n\n// 常量\ndefine("PI", 3.14159);\nconst SITE_NAME = "My Website";\n\n// 输出\necho "Hello, " . $name;\nprint "Age: $age";\nprintf("Height: %.1f", $height);\n\n// 注释\n// 单行注释\n# 另一种单行注释\n/* 多行注释\n   可以跨越多行 */\n\n// 语句结束\necho "每个语句必须以分号结束";\n\n// 大小写敏感性\n// 变量名大小写敏感\n$name = "Alice";\n$Name = "Bob";  // 不同的变量\n\n// 函数名、类名、关键字不区分大小写\nECHO "Hello";  // 等同于 echo\nEcho "World";  // 等同于 echo'
                },
                {
                    title: '变量和数据类型',
                    description: 'PHP的变量声明和数据类型',
                    code: '<?php\n// 变量声明（以$开头）\n$string = "Hello World";\n$integer = 42;\n$float = 3.14;\n$boolean = true;\n$null = null;\n\n// 数组\n$indexed_array = [1, 2, 3, 4, 5];\n$associative_array = [\n    "name" => "Alice",\n    "age" => 25,\n    "city" => "New York"\n];\n\n// 多维数组\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n// 变量类型检查\nvar_dump($string);    // 显示变量类型和值\ngettype($integer);    // 返回变量类型\nis_string($string);   // 检查是否为字符串\nis_int($integer);     // 检查是否为整数\nis_array($indexed_array);  // 检查是否为数组\n\n// 类型转换\n$str_num = "123";\n$int_num = (int)$str_num;     // 强制转换为整数\n$float_num = (float)$str_num; // 强制转换为浮点数\n$bool_val = (bool)$str_num;   // 强制转换为布尔值\n\n// 变量变量\n$var_name = "hello";\n$$var_name = "world";  // 创建变量$hello，值为"world"\necho $hello;  // 输出: world\n\n// 全局变量\n$global_var = "I am global";\n\nfunction test() {\n    global $global_var;\n    echo $global_var;\n}'
                },
                {
                    title: '字符串操作',
                    description: '字符串的创建和操作',
                    code: '<?php\n// 字符串创建\n$single_quoted = \'Single quoted string\';\n$double_quoted = "Double quoted string";\n$heredoc = <<<EOD\nThis is a heredoc string.\nIt can span multiple lines.\nEOD;\n\n$nowdoc = <<<\'EOD\'\nThis is a nowdoc string.\nVariables are not parsed here.\nEOD;\n\n// 字符串连接\n$first = "Hello";\n$last = "World";\n$full = $first . " " . $last;  // "Hello World"\n\n// 字符串插值（双引号中）\n$name = "Alice";\n$greeting = "Hello, $name!";\n$greeting2 = "Hello, {$name}!";  // 更清晰的语法\n\n// 字符串函数\nstrlen($string);           // 字符串长度\nstrtoupper($string);       // 转大写\nstrtolower($string);       // 转小写\nucfirst($string);          // 首字母大写\nstr_replace("old", "new", $string);  // 替换\nsubstr($string, 0, 5);     // 截取子字符串\nstrpos($string, "search"); // 查找位置\nexplode(" ", $string);     // 分割字符串\nimplode(", ", $array);     // 连接数组元素\ntrim($string);             // 去除首尾空白\n\n// 字符串比较\nstrcmp($str1, $str2);      // 区分大小写比较\nstrcasecmp($str1, $str2);  // 不区分大小写比较\n\n// 正则表达式\npreg_match("/pattern/", $string);     // 匹配\npreg_replace("/pattern/", "replacement", $string);  // 替换\npreg_split("/pattern/", $string);     // 分割\n\n// 字符串格式化\nsprintf("Name: %s, Age: %d", $name, $age);\nprintf("Price: %.2f", $price);'
                },
                {
                    title: '数组操作',
                    description: '数组的创建和操作',
                    code: '<?php\n// 数组创建\n$fruits = ["apple", "banana", "orange"];\n$colors = array("red", "green", "blue");  // 旧语法\n\n// 关联数组\n$person = [\n    "name" => "Alice",\n    "age" => 25,\n    "email" => "alice@example.com"\n];\n\n// 数组访问\necho $fruits[0];        // "apple"\necho $person["name"];   // "Alice"\n\n// 数组修改\n$fruits[1] = "grape";   // 修改元素\n$fruits[] = "kiwi";     // 添加元素到末尾\narray_push($fruits, "mango");  // 添加元素\narray_unshift($fruits, "strawberry");  // 添加到开头\n\n// 数组删除\nunset($fruits[0]);      // 删除指定元素\narray_pop($fruits);     // 删除最后一个元素\narray_shift($fruits);   // 删除第一个元素\n\n// 数组函数\ncount($fruits);         // 数组长度\nin_array("apple", $fruits);  // 检查值是否存在\narray_key_exists("name", $person);  // 检查键是否存在\narray_keys($person);    // 获取所有键\narray_values($person);  // 获取所有值\narray_merge($array1, $array2);  // 合并数组\narray_slice($fruits, 1, 3);  // 截取数组\nsort($fruits);          // 排序（值）\nksort($person);         // 按键排序\narray_reverse($fruits); // 反转数组\n\n// 数组遍历\nforeach ($fruits as $fruit) {\n    echo $fruit . "\\n";\n}\n\nforeach ($person as $key => $value) {\n    echo "$key: $value\\n";\n}\n\n// 数组过滤和映射\n$numbers = [1, 2, 3, 4, 5];\n$even = array_filter($numbers, function($n) {\n    return $n % 2 == 0;\n});\n\n$squared = array_map(function($n) {\n    return $n * $n;\n}, $numbers);'
                }
            ]
        },
        {
            title: '控制结构',
            items: [
                {
                    title: '条件语句',
                    description: 'if、else、switch语句',
                    code: '<?php\n// if语句\n$age = 18;\n\nif ($age >= 18) {\n    echo "成年人";\n} elseif ($age >= 13) {\n    echo "青少年";\n} else {\n    echo "儿童";\n}\n\n// 三元操作符\n$status = ($age >= 18) ? "成年人" : "未成年人";\n\n// 空合并操作符（PHP 7+）\n$username = $_GET[\'user\'] ?? \'guest\';\n$config = $user_config ?? $default_config ?? \'fallback\';\n\n// switch语句\n$day = "Monday";\n\nswitch ($day) {\n    case "Monday":\n        echo "星期一";\n        break;\n    case "Tuesday":\n        echo "星期二";\n        break;\n    case "Wednesday":\n        echo "星期三";\n        break;\n    default:\n        echo "其他日子";\n        break;\n}\n\n// match表达式（PHP 8+）\n$result = match($day) {\n    "Monday" => "星期一",\n    "Tuesday" => "星期二",\n    "Wednesday" => "星期三",\n    default => "其他日子"\n};\n\n// 比较操作符\n$a == $b;   // 相等（类型转换）\n$a === $b;  // 全等（类型和值都相等）\n$a != $b;   // 不等\n$a !== $b;  // 不全等\n$a <=> $b;  // 太空船操作符（PHP 7+）\n\n// 逻辑操作符\n$a && $b;   // 逻辑与\n$a || $b;   // 逻辑或\n!$a;        // 逻辑非\n$a and $b;  // 逻辑与（低优先级）\n$a or $b;   // 逻辑或（低优先级）'
                },
                {
                    title: '循环语句',
                    description: 'for、while、foreach循环',
                    code: '<?php\n// for循环\nfor ($i = 0; $i < 10; $i++) {\n    echo "数字: $i\\n";\n}\n\n// while循环\n$i = 0;\nwhile ($i < 5) {\n    echo "计数: $i\\n";\n    $i++;\n}\n\n// do-while循环\n$i = 0;\ndo {\n    echo "至少执行一次: $i\\n";\n    $i++;\n} while ($i < 3);\n\n// foreach循环（数组）\n$fruits = ["apple", "banana", "orange"];\n\nforeach ($fruits as $fruit) {\n    echo "水果: $fruit\\n";\n}\n\nforeach ($fruits as $index => $fruit) {\n    echo "索引 $index: $fruit\\n";\n}\n\n// foreach循环（关联数组）\n$person = [\n    "name" => "Alice",\n    "age" => 25,\n    "city" => "New York"\n];\n\nforeach ($person as $key => $value) {\n    echo "$key: $value\\n";\n}\n\n// 循环控制\nfor ($i = 0; $i < 10; $i++) {\n    if ($i == 3) {\n        continue;  // 跳过当前迭代\n    }\n    if ($i == 7) {\n        break;     // 退出循环\n    }\n    echo $i . " ";\n}\n\n// 嵌套循环\nfor ($i = 1; $i <= 3; $i++) {\n    for ($j = 1; $j <= 3; $j++) {\n        echo "($i, $j) ";\n    }\n    echo "\\n";\n}\n\n// 替代语法（用于模板）\n<?php for ($i = 0; $i < 5; $i++): ?>\n    <p>项目 <?= $i ?></p>\n<?php endfor; ?>\n\n<?php foreach ($fruits as $fruit): ?>\n    <li><?= $fruit ?></li>\n<?php endforeach; ?>'
                }
            ]
        },
        {
            title: '函数',
            items: [
                {
                    title: '函数定义和调用',
                    description: '用户自定义函数',
                    code: '<?php\n// 基本函数\nfunction greet() {\n    echo "Hello, World!";\n}\n\ngreet();  // 调用函数\n\n// 带参数的函数\nfunction greet_user($name) {\n    echo "Hello, $name!";\n}\n\ngreet_user("Alice");\n\n// 带默认参数的函数\nfunction greet_with_title($name, $title = "Mr.") {\n    echo "Hello, $title $name!";\n}\n\ngreet_with_title("Smith");        // "Hello, Mr. Smith!"\ngreet_with_title("Johnson", "Dr."); // "Hello, Dr. Johnson!"\n\n// 返回值\nfunction add($a, $b) {\n    return $a + $b;\n}\n\n$result = add(5, 3);  // 8\n\n// 多个返回值（使用数组）\nfunction get_name_age() {\n    return ["Alice", 25];\n}\n\nlist($name, $age) = get_name_age();\n// 或者\n[$name, $age] = get_name_age();  // PHP 7.1+\n\n// 引用传递\nfunction increment(&$value) {\n    $value++;\n}\n\n$num = 5;\nincrement($num);\necho $num;  // 6\n\n// 可变参数\nfunction sum(...$numbers) {\n    return array_sum($numbers);\n}\n\necho sum(1, 2, 3, 4, 5);  // 15\n\n// 类型声明（PHP 7+）\nfunction divide(float $a, float $b): float {\n    return $a / $b;\n}\n\n// 严格类型模式\ndeclare(strict_types=1);\n\nfunction strict_add(int $a, int $b): int {\n    return $a + $b;\n}'
                },
                {
                    title: '匿名函数和闭包',
                    description: 'Lambda函数和闭包',
                    code: '<?php\n// 匿名函数\n$greet = function($name) {\n    return "Hello, $name!";\n};\n\necho $greet("Alice");\n\n// 作为回调函数\n$numbers = [1, 2, 3, 4, 5];\n\n$squared = array_map(function($n) {\n    return $n * $n;\n}, $numbers);\n\n$even = array_filter($numbers, function($n) {\n    return $n % 2 == 0;\n});\n\n// 闭包（使用use关键字）\n$multiplier = 3;\n\n$multiply = function($n) use ($multiplier) {\n    return $n * $multiplier;\n};\n\necho $multiply(4);  // 12\n\n// 引用捕获\n$counter = 0;\n\n$increment = function() use (&$counter) {\n    $counter++;\n    return $counter;\n};\n\necho $increment();  // 1\necho $increment();  // 2\n\n// 箭头函数（PHP 7.4+）\n$multiply = fn($n) => $n * $multiplier;\n\n$squared = array_map(fn($n) => $n * $n, $numbers);\n\n// 高阶函数\nfunction create_multiplier($factor) {\n    return function($n) use ($factor) {\n        return $n * $factor;\n    };\n}\n\n$double = create_multiplier(2);\n$triple = create_multiplier(3);\n\necho $double(5);  // 10\necho $triple(5);  // 15\n\n// 函数作为参数\nfunction apply_operation($a, $b, $operation) {\n    return $operation($a, $b);\n}\n\n$add = function($x, $y) { return $x + $y; };\n$multiply = function($x, $y) { return $x * $y; };\n\necho apply_operation(5, 3, $add);      // 8\necho apply_operation(5, 3, $multiply); // 15'
                },
                {
                    title: '内置函数',
                    description: '常用的PHP内置函数',
                    code: '<?php\n// 数学函数\nabs(-5);           // 绝对值: 5\nmax(1, 3, 2);      // 最大值: 3\nmin(1, 3, 2);      // 最小值: 1\nround(3.7);        // 四舍五入: 4\nceil(3.2);         // 向上取整: 4\nfloor(3.8);        // 向下取整: 3\nsqrt(16);          // 平方根: 4\npow(2, 3);         // 幂运算: 8\nrand(1, 10);       // 随机数\nmt_rand(1, 100);   // 更好的随机数\n\n// 日期时间函数\ndate("Y-m-d H:i:s");           // 当前日期时间\ntime();                        // 当前时间戳\nmktime(0, 0, 0, 12, 25, 2023); // 创建时间戳\nstrtotime("2023-12-25");       // 字符串转时间戳\ndate("Y-m-d", strtotime("+1 week")); // 一周后\n\n// 文件系统函数\nfile_exists("file.txt");       // 文件是否存在\nis_file("file.txt");           // 是否为文件\nis_dir("directory");           // 是否为目录\nfilesize("file.txt");          // 文件大小\nfile_get_contents("file.txt"); // 读取文件内容\nfile_put_contents("file.txt", "content"); // 写入文件\nunlink("file.txt");            // 删除文件\nmkdir("directory");            // 创建目录\n\n// URL和编码函数\nurlencode("hello world");      // URL编码\nurldecode("hello%20world");    // URL解码\nhtmlspecialchars("<script>");  // HTML特殊字符转义\nhtml_entity_decode("&lt;");    // HTML实体解码\nbase64_encode("text");         // Base64编码\nbase64_decode("dGV4dA==");     // Base64解码\n\n// JSON函数\njson_encode($array);           // 数组转JSON\njson_decode($json, true);      // JSON转数组\n\n// 变量函数\nisset($variable);              // 变量是否设置\nempty($variable);              // 变量是否为空\nunset($variable);              // 销毁变量\nvar_dump($variable);           // 打印变量信息\nprint_r($array);               // 打印数组信息'
                }
            ]
        },
        {
            title: '面向对象编程',
            items: [
                {
                    title: '类和对象',
                    description: '类的定义和对象的创建',
                    code: '<?php\n// 类定义\nclass Person {\n    // 属性\n    public $name;\n    protected $age;\n    private $email;\n    \n    // 构造函数\n    public function __construct($name, $age, $email) {\n        $this->name = $name;\n        $this->age = $age;\n        $this->email = $email;\n    }\n    \n    // 方法\n    public function introduce() {\n        return "Hi, I\'m {$this->name}";\n    }\n    \n    // Getter方法\n    public function getAge() {\n        return $this->age;\n    }\n    \n    // Setter方法\n    public function setAge($age) {\n        if ($age > 0) {\n            $this->age = $age;\n        }\n    }\n    \n    // 静态属性和方法\n    public static $species = "Homo sapiens";\n    \n    public static function getSpecies() {\n        return self::$species;\n    }\n    \n    // 魔术方法\n    public function __toString() {\n        return $this->name;\n    }\n    \n    public function __get($property) {\n        if (property_exists($this, $property)) {\n            return $this->$property;\n        }\n    }\n    \n    public function __set($property, $value) {\n        if (property_exists($this, $property)) {\n            $this->$property = $value;\n        }\n    }\n}\n\n// 对象创建和使用\n$person = new Person("Alice", 25, "alice@example.com");\necho $person->introduce();\necho $person->getAge();\n$person->setAge(26);\n\n// 静态调用\necho Person::getSpecies();\necho Person::$species;\n\n// 对象比较\n$person1 = new Person("Alice", 25, "alice@example.com");\n$person2 = new Person("Alice", 25, "alice@example.com");\n\n$person1 == $person2;   // true（属性相同）\n$person1 === $person2;  // false（不是同一个对象）'
                },
                {
                    title: '继承和多态',
                    description: '类的继承和方法重写',
                    code: '<?php\n// 父类\nclass Animal {\n    protected $name;\n    protected $species;\n    \n    public function __construct($name, $species) {\n        $this->name = $name;\n        $this->species = $species;\n    }\n    \n    public function makeSound() {\n        return "Some generic animal sound";\n    }\n    \n    public function getName() {\n        return $this->name;\n    }\n    \n    // final方法不能被重写\n    final public function getSpecies() {\n        return $this->species;\n    }\n}\n\n// 子类\nclass Dog extends Animal {\n    private $breed;\n    \n    public function __construct($name, $breed) {\n        parent::__construct($name, "Canine");\n        $this->breed = $breed;\n    }\n    \n    // 方法重写\n    public function makeSound() {\n        return "Woof! Woof!";\n    }\n    \n    public function fetch() {\n        return "{$this->name} is fetching the ball";\n    }\n    \n    public function getBreed() {\n        return $this->breed;\n    }\n}\n\nclass Cat extends Animal {\n    public function __construct($name) {\n        parent::__construct($name, "Feline");\n    }\n    \n    public function makeSound() {\n        return "Meow!";\n    }\n    \n    public function climb() {\n        return "{$this->name} is climbing";\n    }\n}\n\n// 使用\n$dog = new Dog("Buddy", "Golden Retriever");\n$cat = new Cat("Whiskers");\n\necho $dog->makeSound();  // "Woof! Woof!"\necho $cat->makeSound();  // "Meow!"\necho $dog->fetch();\necho $cat->climb();\n\n// 多态\n$animals = [$dog, $cat];\n\nforeach ($animals as $animal) {\n    echo $animal->getName() . " says: " . $animal->makeSound() . "\\n";\n}\n\n// instanceof操作符\nif ($dog instanceof Animal) {\n    echo "Dog is an Animal";\n}\n\nif ($dog instanceof Dog) {\n    echo "This is specifically a Dog";\n}'
                },
                {
                    title: '抽象类和接口',
                    description: '抽象类和接口的使用',
                    code: '<?php\n// 抽象类\nabstract class Shape {\n    protected $color;\n    \n    public function __construct($color) {\n        $this->color = $color;\n    }\n    \n    // 抽象方法（必须在子类中实现）\n    abstract public function calculateArea();\n    abstract public function calculatePerimeter();\n    \n    // 具体方法\n    public function getColor() {\n        return $this->color;\n    }\n    \n    public function setColor($color) {\n        $this->color = $color;\n    }\n}\n\n// 接口\ninterface Drawable {\n    public function draw();\n}\n\ninterface Resizable {\n    public function resize($factor);\n}\n\n// 实现抽象类和接口\nclass Circle extends Shape implements Drawable, Resizable {\n    private $radius;\n    \n    public function __construct($color, $radius) {\n        parent::__construct($color);\n        $this->radius = $radius;\n    }\n    \n    public function calculateArea() {\n        return pi() * $this->radius * $this->radius;\n    }\n    \n    public function calculatePerimeter() {\n        return 2 * pi() * $this->radius;\n    }\n    \n    public function draw() {\n        return "Drawing a {$this->color} circle";\n    }\n    \n    public function resize($factor) {\n        $this->radius *= $factor;\n    }\n    \n    public function getRadius() {\n        return $this->radius;\n    }\n}\n\nclass Rectangle extends Shape implements Drawable {\n    private $width;\n    private $height;\n    \n    public function __construct($color, $width, $height) {\n        parent::__construct($color);\n        $this->width = $width;\n        $this->height = $height;\n    }\n    \n    public function calculateArea() {\n        return $this->width * $this->height;\n    }\n    \n    public function calculatePerimeter() {\n        return 2 * ($this->width + $this->height);\n    }\n    \n    public function draw() {\n        return "Drawing a {$this->color} rectangle";\n    }\n}\n\n// 使用\n$circle = new Circle("red", 5);\n$rectangle = new Rectangle("blue", 4, 6);\n\necho $circle->draw();\necho "Area: " . $circle->calculateArea();\n$circle->resize(2);\n\necho $rectangle->draw();\necho "Perimeter: " . $rectangle->calculatePerimeter();'
                },
                {
                    title: 'Trait和命名空间',
                    description: 'Trait复用和命名空间',
                    code: '<?php\n// Trait定义\ntrait Loggable {\n    public function log($message) {\n        echo "[" . date("Y-m-d H:i:s") . "] " . $message . "\\n";\n    }\n    \n    public function logError($message) {\n        $this->log("ERROR: " . $message);\n    }\n}\n\ntrait Cacheable {\n    private $cache = [];\n    \n    public function cache($key, $value) {\n        $this->cache[$key] = $value;\n    }\n    \n    public function getFromCache($key) {\n        return $this->cache[$key] ?? null;\n    }\n}\n\n// 使用Trait\nclass User {\n    use Loggable, Cacheable;\n    \n    private $name;\n    private $email;\n    \n    public function __construct($name, $email) {\n        $this->name = $name;\n        $this->email = $email;\n        $this->log("User created: $name");\n    }\n    \n    public function getName() {\n        return $this->name;\n    }\n}\n\n// Trait冲突解决\ntrait A {\n    public function smallTalk() {\n        echo "a";\n    }\n}\n\ntrait B {\n    public function smallTalk() {\n        echo "b";\n    }\n}\n\nclass Talker {\n    use A, B {\n        B::smallTalk insteadof A;  // 使用B的方法\n        A::smallTalk as bigTalk;   // A的方法重命名\n    }\n}\n\n// 命名空间\nnamespace MyApp\\Models;\n\nclass User {\n    // 类定义\n}\n\nnamespace MyApp\\Controllers;\n\nuse MyApp\\Models\\User;  // 导入类\nuse MyApp\\Models\\User as UserModel;  // 别名\n\nclass UserController {\n    public function createUser() {\n        $user = new User();  // 使用导入的类\n        $user2 = new UserModel();  // 使用别名\n        $user3 = new \\MyApp\\Models\\User();  // 完全限定名\n    }\n}\n\n// 全局命名空间\nnamespace MyApp;\n\n$datetime = new \\DateTime();  // 全局DateTime类\n\n// 命名空间常量和函数\nnamespace MyApp;\n\nconst VERSION = "1.0.0";\n\nfunction helper() {\n    return "Helper function";\n}\n\necho VERSION;\necho helper();'
                }
            ]
        },
        {
            title: '错误处理',
            items: [
                {
                    title: '异常处理',
                    description: 'try-catch异常处理',
                    code: '<?php\n// 基本异常处理\ntry {\n    $result = 10 / 0;\n} catch (DivisionByZeroError $e) {\n    echo "除零错误: " . $e->getMessage();\n} catch (Exception $e) {\n    echo "一般错误: " . $e->getMessage();\n} finally {\n    echo "总是执行的代码";\n}\n\n// 抛出异常\nfunction divide($a, $b) {\n    if ($b == 0) {\n        throw new InvalidArgumentException("除数不能为零");\n    }\n    return $a / $b;\n}\n\ntry {\n    echo divide(10, 0);\n} catch (InvalidArgumentException $e) {\n    echo "参数错误: " . $e->getMessage();\n}\n\n// 自定义异常\nclass CustomException extends Exception {\n    public function errorMessage() {\n        return "错误在第 {$this->getLine()} 行，文件 {$this->getFile()}: {$this->getMessage()}";\n    }\n}\n\nfunction testFunction() {\n    throw new CustomException("自定义错误消息");\n}\n\ntry {\n    testFunction();\n} catch (CustomException $e) {\n    echo $e->errorMessage();\n}\n\n// 多个catch块\ntry {\n    // 可能抛出不同异常的代码\n    if (rand(0, 1)) {\n        throw new InvalidArgumentException("参数错误");\n    } else {\n        throw new RuntimeException("运行时错误");\n    }\n} catch (InvalidArgumentException $e) {\n    echo "参数异常: " . $e->getMessage();\n} catch (RuntimeException $e) {\n    echo "运行时异常: " . $e->getMessage();\n} catch (Exception $e) {\n    echo "其他异常: " . $e->getMessage();\n}\n\n// 重新抛出异常\ntry {\n    try {\n        throw new Exception("内部异常");\n    } catch (Exception $e) {\n        echo "捕获内部异常: " . $e->getMessage();\n        throw $e;  // 重新抛出\n    }\n} catch (Exception $e) {\n    echo "捕获重新抛出的异常: " . $e->getMessage();\n}\n\n// 异常信息\ntry {\n    throw new Exception("测试异常");\n} catch (Exception $e) {\n    echo "消息: " . $e->getMessage() . "\\n";\n    echo "代码: " . $e->getCode() . "\\n";\n    echo "文件: " . $e->getFile() . "\\n";\n    echo "行号: " . $e->getLine() . "\\n";\n    echo "堆栈跟踪: " . $e->getTraceAsString() . "\\n";\n}'
                },
                {
                    title: '错误报告',
                    description: '错误级别和报告设置',
                    code: '<?php\n// 错误报告级别\nerror_reporting(E_ALL);                    // 报告所有错误\nerror_reporting(E_ERROR | E_WARNING);      // 只报告错误和警告\nerror_reporting(0);                        // 关闭错误报告\n\n// 显示错误\nini_set(\'display_errors\', 1);             // 显示错误\nini_set(\'display_errors\', 0);             // 不显示错误\n\n// 记录错误到日志\nini_set(\'log_errors\', 1);\nini_set(\'error_log\', \'/path/to/error.log\');\n\n// 自定义错误处理函数\nfunction customErrorHandler($errno, $errstr, $errfile, $errline) {\n    $errorTypes = [\n        E_ERROR => \'ERROR\',\n        E_WARNING => \'WARNING\',\n        E_NOTICE => \'NOTICE\',\n        E_USER_ERROR => \'USER_ERROR\',\n        E_USER_WARNING => \'USER_WARNING\',\n        E_USER_NOTICE => \'USER_NOTICE\'\n    ];\n    \n    $type = $errorTypes[$errno] ?? \'UNKNOWN\';\n    echo "[$type] $errstr in $errfile on line $errline\\n";\n    \n    // 对于致命错误，停止执行\n    if ($errno == E_ERROR || $errno == E_USER_ERROR) {\n        die("Fatal error occurred");\n    }\n}\n\n// 设置错误处理函数\nset_error_handler(\'customErrorHandler\');\n\n// 触发用户错误\ntrigger_error("这是一个用户警告", E_USER_WARNING);\ntrigger_error("这是一个用户错误", E_USER_ERROR);\n\n// 恢复默认错误处理\nrestore_error_handler();\n\n// 异常处理函数\nfunction customExceptionHandler($exception) {\n    echo "未捕获的异常: " . $exception->getMessage() . "\\n";\n    echo "文件: " . $exception->getFile() . "\\n";\n    echo "行号: " . $exception->getLine() . "\\n";\n}\n\nset_exception_handler(\'customExceptionHandler\');\n\n// 脚本结束时的处理\nfunction shutdownHandler() {\n    $error = error_get_last();\n    if ($error && $error[\'type\'] == E_ERROR) {\n        echo "致命错误: " . $error[\'message\'] . " in " . $error[\'file\'] . " on line " . $error[\'line\'];\n    }\n}\n\nregister_shutdown_function(\'shutdownHandler\');'
                }
            ]
        },
        {
            title: '文件和I/O操作',
            items: [
                {
                    title: '文件读写',
                    description: '文件的读取和写入操作',
                    code: '<?php\n// 读取整个文件\n$content = file_get_contents(\'file.txt\');\necho $content;\n\n// 写入文件\nfile_put_contents(\'file.txt\', \'Hello, World!\');\nfile_put_contents(\'file.txt\', \'Append this\', FILE_APPEND);\n\n// 逐行读取文件\n$handle = fopen(\'file.txt\', \'r\');\nif ($handle) {\n    while (($line = fgets($handle)) !== false) {\n        echo $line;\n    }\n    fclose($handle);\n}\n\n// 读取文件到数组\n$lines = file(\'file.txt\');\nforeach ($lines as $line) {\n    echo $line;\n}\n\n// 文件写入（详细控制）\n$handle = fopen(\'output.txt\', \'w\');\nif ($handle) {\n    fwrite($handle, "第一行\\n");\n    fwrite($handle, "第二行\\n");\n    fclose($handle);\n}\n\n// 文件追加\n$handle = fopen(\'output.txt\', \'a\');\nif ($handle) {\n    fwrite($handle, "追加的内容\\n");\n    fclose($handle);\n}\n\n// CSV文件操作\n// 读取CSV\n$handle = fopen(\'data.csv\', \'r\');\nwhile (($data = fgetcsv($handle)) !== false) {\n    print_r($data);\n}\nfclose($handle);\n\n// 写入CSV\n$data = [\n    [\'Name\', \'Age\', \'City\'],\n    [\'Alice\', 25, \'New York\'],\n    [\'Bob\', 30, \'London\']\n];\n\n$handle = fopen(\'output.csv\', \'w\');\nforeach ($data as $row) {\n    fputcsv($handle, $row);\n}\nfclose($handle);\n\n// 文件信息\nif (file_exists(\'file.txt\')) {\n    echo "文件大小: " . filesize(\'file.txt\') . " bytes\\n";\n    echo "最后修改时间: " . date("Y-m-d H:i:s", filemtime(\'file.txt\')) . "\\n";\n    echo "是否可读: " . (is_readable(\'file.txt\') ? \'是\' : \'否\') . "\\n";\n    echo "是否可写: " . (is_writable(\'file.txt\') ? \'是\' : \'否\') . "\\n";\n}'
                },
                {
                    title: '目录操作',
                    description: '目录的创建、读取和管理',
                    code: '<?php\n// 创建目录\nif (!is_dir(\'uploads\')) {\n    mkdir(\'uploads\', 0755, true);  // 递归创建\n}\n\n// 读取目录内容\n$files = scandir(\'./\');\nforeach ($files as $file) {\n    if ($file != \'.\'&& $file != \'..\') {\n        echo $file . "\\n";\n    }\n}\n\n// 使用DirectoryIterator\n$iterator = new DirectoryIterator(\'./\');\nforeach ($iterator as $fileinfo) {\n    if (!$fileinfo->isDot()) {\n        echo $fileinfo->getFilename() . "\\n";\n        if ($fileinfo->isDir()) {\n            echo "  [目录]\\n";\n        } else {\n            echo "  大小: " . $fileinfo->getSize() . " bytes\\n";\n        }\n    }\n}\n\n// 递归遍历目录\nfunction listDirectory($dir, $prefix = \'\') {\n    $files = scandir($dir);\n    foreach ($files as $file) {\n        if ($file != \'.\'&& $file != \'..\') {\n            echo $prefix . $file . "\\n";\n            $fullPath = $dir . DIRECTORY_SEPARATOR . $file;\n            if (is_dir($fullPath)) {\n                listDirectory($fullPath, $prefix . \'  \');\n            }\n        }\n    }\n}\n\nlistDirectory(\'./\');\n\n// 使用RecursiveDirectoryIterator\n$iterator = new RecursiveIteratorIterator(\n    new RecursiveDirectoryIterator(\'./\'),\n    RecursiveIteratorIterator::SELF_FIRST\n);\n\nforeach ($iterator as $file) {\n    echo str_repeat(\'  \', $iterator->getDepth()) . $file->getFilename() . "\\n";\n}\n\n// 删除目录\nfunction removeDirectory($dir) {\n    if (!is_dir($dir)) {\n        return false;\n    }\n    \n    $files = scandir($dir);\n    foreach ($files as $file) {\n        if ($file != \'.\'&& $file != \'..\') {\n            $fullPath = $dir . DIRECTORY_SEPARATOR . $file;\n            if (is_dir($fullPath)) {\n                removeDirectory($fullPath);\n            } else {\n                unlink($fullPath);\n            }\n        }\n    }\n    \n    return rmdir($dir);\n}\n\n// 复制目录\nfunction copyDirectory($source, $destination) {\n    if (!is_dir($destination)) {\n        mkdir($destination, 0755, true);\n    }\n    \n    $files = scandir($source);\n    foreach ($files as $file) {\n        if ($file != \'.\'&& $file != \'..\') {\n            $sourcePath = $source . DIRECTORY_SEPARATOR . $file;\n            $destPath = $destination . DIRECTORY_SEPARATOR . $file;\n            \n            if (is_dir($sourcePath)) {\n                copyDirectory($sourcePath, $destPath);\n            } else {\n                copy($sourcePath, $destPath);\n            }\n        }\n    }\n}\n\n// 获取目录大小\nfunction getDirectorySize($dir) {\n    $size = 0;\n    $files = scandir($dir);\n    \n    foreach ($files as $file) {\n        if ($file != \'.\'&& $file != \'..\') {\n            $fullPath = $dir . DIRECTORY_SEPARATOR . $file;\n            if (is_dir($fullPath)) {\n                $size += getDirectorySize($fullPath);\n            } else {\n                $size += filesize($fullPath);\n            }\n        }\n    }\n    \n    return $size;\n}'
                }
            ]
        }
    ]
};

// 导出数据
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PHP_CHEATSHEET;
} else if (typeof window !== 'undefined') {
    window.PHP_CHEATSHEET = PHP_CHEATSHEET;
}