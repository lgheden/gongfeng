/**
 * API开发类Prompt数据
 * 包含RESTful API、GraphQL、微服务等API开发相关Prompt模板
 */

var API_DEVELOPMENT_PROMPTS = [
    {
        id: 'restful-api-generator',
        title: 'RESTful API生成器',
        description: '根据业务需求生成完整的RESTful API设计和实现代码',
        category: 'api-development',
        language: 'general',
        difficulty: '中级',
        tags: ['RESTful API', 'API设计', '后端开发'],
        prompt: "6K+35biu5oiR6K6+6K6h5ZKM5a6e546w5LiA5LiqUkVTVGZ1bCBBUEnvvJoKCioq5Lia5Yqh6ZyA5rGC77yaKioKW+ivpue7huaPj+i/sEFQSeeahOS4muWKoeWKn+iDveWSjOeUqOmAlF0KCioq6LWE5rqQ5qih5Z6L77yaKioKW+aPj+i/sOS4u+imgeeahOaVsOaNruaooeWei+WSjOi1hOa6kOWFs+ezu10KCioq5oqA5pyv5qCI77yaKioKLSDlkI7nq6/moYbmnrbvvJpb5aaCRXhwcmVzcy5qc+OAgVNwcmluZyBCb29044CBRGphbmdv562JXQotIOaVsOaNruW6k++8mlvlpoJNeVNRTOOAgU1vbmdvRELjgIFQb3N0Z3JlU1FM562JXQotIOiupOivgeaWueW8j++8mlvlpoJKV1TjgIFPQXV0aDLjgIFBUEkgS2V5562JXQotIOWFtuS7luimgeaxgu+8mlvnvJPlrZjjgIHpmZDmtYHjgIHmlofmoaPnrYldCgoqKkFQSeiuvuiuoeimgeaxgu+8mioqCgoxLiAqKui1hOa6kOiuvuiuoSoqCiAgIC0gUkVTVGZ1bCBVUkzorr7orqEKICAgLSBIVFRQ5pa55rOV5pig5bCECiAgIC0g6LWE5rqQ5YWz57O75aSE55CGCiAgIC0g54mI5pys5o6n5Yi2562W55WlCgoyLiAqKuivt+axguWTjeW6lOagvOW8jyoqCiAgIC0g6K+35rGC5Y+C5pWw6aqM6K+BCiAgIC0g5ZON5bqU5pWw5o2u57uT5p6ECiAgIC0g6ZSZ6K+v5aSE55CG5py65Yi2CiAgIC0g54q25oCB56CB6KeE6IyDCgozLiAqKuWuieWFqOaAp+iuvuiuoSoqCiAgIC0g6Lqr5Lu96K6k6K+BCiAgIC0g5p2D6ZmQ5o6n5Yi2CiAgIC0g5pWw5o2u6aqM6K+BCiAgIC0g5a6J5YWo5aS06K6+572uCgo0LiAqKuaAp+iDveS8mOWMlioqCiAgIC0g5YiG6aG15aSE55CGCiAgIC0g57yT5a2Y562W55WlCiAgIC0g5p+l6K+i5LyY5YyWCiAgIC0g6ZmQ5rWB5py65Yi2Cgo1LiAqKuaWh+aho+WSjOa1i+ivlSoqCiAgIC0gQVBJ5paH5qGj55Sf5oiQCiAgIC0g5Y2V5YWD5rWL6K+VCiAgIC0g6ZuG5oiQ5rWL6K+VCiAgIC0g5oCn6IO95rWL6K+VCgoqKui+k+WHuuWGheWuue+8mioqCi0g5a6M5pW055qEQVBJ6K6+6K6h5paH5qGjCi0g5a6e546w5Luj56CB77yI5o6n5Yi25Zmo44CB5qih5Z6L44CB6Lev55Sx77yJCi0g5pWw5o2u5bqT6K6+6K6hCiAtIOiupOivgeS4remXtOS7tgotIEFQSeaWh+ahowotIOa1i+ivleeUqOS+iwotIOmDqOe9sumFjee9rg==",
        examples: [
            {
                title: 'Node.js Express用户管理API示例',
                code: ""
            }
        ]
    },
    {
        id: 'graphql-api-generator',
        title: 'GraphQL API生成器',
        description: '设计和实现GraphQL API，包括Schema定义、Resolver实现和查询优化',
        category: 'api-development',
        language: 'general',
        difficulty: '高级',
        tags: ['GraphQL', 'Schema设计', 'Resolver'],
        prompt: "6K+35biu5oiR6K6+6K6h5ZKM5a6e546w5LiA5LiqR3JhcGhRTCBBUEnvvJoKCioq5Lia5Yqh6ZyA5rGC77yaKioKW+ivpue7huaPj+i/sEdyYXBoUUwgQVBJ55qE5Yqf6IO96ZyA5rGCXQoKKirmlbDmja7mqKHlnovvvJoqKgpb5o+P6L+w5Li76KaB55qE5pWw5o2u5a6e5L2T5ZKM5YWz57O7XQoKKirmioDmnK/moIjvvJoqKgotIEdyYXBoUUzmnI3liqHlmajvvJpb5aaCQXBvbGxvIFNlcnZlcuOAgUdyYXBoUUwgWW9nYeetiV0KLSDmlbDmja7lupPvvJpb5aaCTW9uZ29EQuOAgVBvc3RncmVTUUznrYldCi0g6K6k6K+B5pa55byP77yaW0pXVOOAgU9BdXRoMuetiV0KLSDlhbbku5blt6XlhbfvvJpbRGF0YUxvYWRlcuOAgee8k+WtmOetiV0KCioqR3JhcGhRTOiuvuiuoeimgeaxgu+8mioqCgoxLiAqKlNjaGVtYeiuvuiuoSoqCiAgIC0gVHlwZeWumuS5iQogICAtIFF1ZXJ56K6+6K6hCiAgIC0gTXV0YXRpb27orr7orqEKICAgLSBTdWJzY3JpcHRpb27orr7orqEKICAgLSDovpPlhaXnsbvlnovlrprkuYkKCjIuICoqUmVzb2x2ZXLlrp7njrAqKgogICAtIOafpeivouino+aekOWZqAogICAtIOWPmOabtOino+aekOWZqAogICAtIOWtl+auteino+aekOWZqAogICAtIOmUmeivr+WkhOeQhgoKMy4gKirmgKfog73kvJjljJYqKgogICAtIE4rMeafpeivoumXrumimOino+WGswogICAtIERhdGFMb2FkZXLkvb/nlKgKICAgLSDmn6Xor6LlpI3mnYLluqbpmZDliLYKICAgLSDnvJPlrZjnrZbnlaUKCjQuICoq5a6J5YWo5oCnKioKICAgLSDorqTor4HmjojmnYMKICAgLSDmn6Xor6Lmt7HluqbpmZDliLYKICAgLSDpgJ/njofpmZDliLYKICAgLSDovpPlhaXpqozor4EKCjUuICoq5byA5Y+R5bel5YW3KioKICAgLSBHcmFwaFFMIFBsYXlncm91bmQKICAgLSDmlofmoaPnlJ/miJAKICAgLSDmtYvor5Xlt6XlhbcKICAgLSDnm5HmjqfmlrnmoYgKCioq6L6T5Ye65YaF5a6577yaKioKLSBHcmFwaFFMIFNjaGVtYeWumuS5iQotIFJlc29sdmVy5a6e546w5Luj56CBCi0g5pWw5o2u6K6/6Zeu5bGCCi0g6K6k6K+B5Lit6Ze05Lu2Ci0g5oCn6IO95LyY5YyW5pa55qGICi0g5rWL6K+V55So5L6L",
        examples: [
            {
                title: 'Apollo Server博客系统GraphQL API示例',
                code: ""
            }
        ]
    },
    {
        id: 'microservice-api-generator',
        title: '微服务API生成器',
        description: '设计和实现微服务架构的API，包括服务拆分、通信机制和服务治理',
        category: 'api-development',
        language: 'general',
        difficulty: '高级',
        tags: ['微服务', '服务拆分', 'API网关'],
        prompt: "6K+35biu5oiR6K6+6K6h5ZKM5a6e546w5b6u5pyN5Yqh5p625p6E55qEQVBJ57O757uf77yaCgoqKuS4muWKoeWcuuaZr++8mioqClvor6bnu4bmj4/ov7DkuJrliqHpoobln5/lkozlip/og73pnIDmsYJdCgoqKuacjeWKoeaLhuWIhumcgOaxgu+8mioqClvmj4/ov7DpnIDopoHmi4bliIbnmoTmnI3liqHlkozovrnnlYxdCgoqKuaKgOacr+agiO+8mioqCi0g5pyN5Yqh5qGG5p6277yaW+WmglNwcmluZyBCb29044CBRXhwcmVzcy5qc+OAgUdvIEdpbuetiV0KLSDmnI3liqHms6jlhozlj5HnjrDvvJpb5aaCQ29uc3Vs44CBRXVyZWth44CBTmFjb3PnrYldCi0gQVBJ572R5YWz77yaW+WmgktvbmfjgIFadXVs44CBR2F0ZXdheeetiV0KLSDmtojmga/pmJ/liJfvvJpb5aaCUmFiYml0TVHjgIFLYWZrYeOAgVJlZGlz562JXQotIOaVsOaNruW6k++8mlvlkITmnI3liqHnmoTmlbDmja7lrZjlgqjmlrnmoYhdCgoqKuW+ruacjeWKoeiuvuiuoeimgeaxgu+8mioqCgoxLiAqKuacjeWKoeaLhuWIhuiuvuiuoSoqCiAgIC0g6aKG5Z+f6amx5Yqo6K6+6K6hCiAgIC0g5pyN5Yqh6L6555WM5YiS5YiGCiAgIC0g5pWw5o2u5LiA6Ie05oCn562W55WlCiAgIC0g5pyN5Yqh5L6d6LWW5YWz57O7CgoyLiAqKkFQSeiuvuiuoSoqCiAgIC0gUkVTVGZ1bCBBUEnop4TojIMKICAgLSDmnI3liqHpl7TpgJrkv6HljY/orq4KICAgLSDlvILmraXmtojmga/orr7orqEKICAgLSDkuovku7bpqbHliqjmnrbmnoQKCjMuICoq5pyN5Yqh5rK755CGKioKICAgLSDmnI3liqHms6jlhozlj5HnjrAKICAgLSDotJ/ovb3lnYfooaEKICAgLSDnhpTmlq3pmY3nuqcKICAgLSDpmZDmtYHmjqfliLYKCjQuICoq5pWw5o2u566h55CGKioKICAgLSDliIbluIPlvI/kuovliqEKICAgLSDmlbDmja7kuIDoh7TmgKcKICAgLSDkuovku7bmuq/mupAKICAgLSBDUVJT5qih5byPCgo1LiAqKuebkeaOp+i/kOe7tCoqCiAgIC0g6ZO+6Lev6L+96LiqCiAgIC0g5pyN5Yqh55uR5o6nCiAgIC0g5pel5b+X6IGa5ZCICiAgIC0g5YGl5bq35qOA5p+lCgoqKui+k+WHuuWGheWuue+8mioqCi0g5b6u5pyN5Yqh5p625p6E6K6+6K6hCi0g5ZCE5pyN5YqhQVBJ5a6e546wCi0g5pyN5Yqh6Ze06YCa5L+h5Luj56CBCi0g6YWN572u566h55CG5pa55qGICi0g6YOo572y6ISa5pysCi0g55uR5o6n5pa55qGI",
        examples: [
            {
                title: 'Spring Cloud电商微服务示例',
                code: ""
            }
        ]
    }
];

// 导出数据
if (typeof module !== 'undefined' && module.exports) {
    module.exports = API_DEVELOPMENT_PROMPTS;
} else if (typeof window !== 'undefined') {
    window.API_DEVELOPMENT_PROMPTS = API_DEVELOPMENT_PROMPTS;
}