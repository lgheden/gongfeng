/**
 * 安全和性能优化类Prompt数据
 * 包含安全审计、性能优化、漏洞修复、监控等相关Prompt模板
 */

var SECURITY_PERFORMANCE_PROMPTS = [
    {
        id: 'security-audit-analyzer',
        title: '安全审计分析器',
        description: '对代码进行全面的安全审计，识别潜在漏洞并提供修复建议',
        category: 'security',
        language: 'multiple',
        difficulty: '高级',
        tags: ['安全审计', '漏洞扫描', 'OWASP', '代码安全'],
        prompt: "6K+35a+55Lul5LiL5Luj56CB6L+b6KGM5YWo6Z2i55qE5a6J5YWo5a6h6K6h5YiG5p6Q77yaCgoqKuS7o+eggeS/oeaBr++8mioqCi0g57yW56iL6K+t6KiA77yaW0phdmFTY3JpcHQvUHl0aG9uL0phdmEvQyMvUEhQL+WFtuS7ll0KLSDlupTnlKjnsbvlnovvvJpbV2Vi5bqU55SoL0FQSeacjeWKoS/np7vliqjlupTnlKgv5qGM6Z2i5bqU55SoXQotIOahhuaetuaKgOacr++8mltFeHByZXNzL0RqYW5nby9TcHJpbmcvQVNQLk5FVC9MYXJhdmVsL+WFtuS7ll0KLSDpg6jnvbLnjq/looPvvJpb5LqR5pyN5YqhL+acrOWcsOacjeWKoeWZqC/lrrnlmajljJZdCgoqKuWuoeiuoeiMg+WbtO+8mioqCi0g6L6T5YWl6aqM6K+B77yaW1NRTOazqOWFpS9YU1MvQ1NSRi/lkb3ku6Tms6jlhaVdCi0g6Lqr5Lu96K6k6K+B77yaW+WvhueggeWuieWFqC/kvJror53nrqHnkIYvSldU5a6J5YWoXQotIOaOiOadg+aOp+WItu+8mlvmnYPpmZDpqozor4Ev6K6/6Zeu5o6n5Yi2L+aVsOaNruadg+mZkF0KLSDmlbDmja7kv53miqTvvJpb5Yqg5a+G5a2Y5YKoL+S8oOi+k+WuieWFqC/mlY/mhJ/kv6Hmga9dCi0g6YWN572u5a6J5YWo77yaW+eOr+Wig+WPmOmHjy/lr4bpkqXnrqHnkIYv5pyN5Yqh6YWN572uXQoKKirku6PnoIHnpLrkvovvvJoqKgpcYFxgXGBb6K+t6KiAXQpb5Zyo5q2k57KY6LS06ZyA6KaB5a6h6K6h55qE5Luj56CBXQpcYFxgXGAKCioq6L6T5Ye66KaB5rGC77yaKioKCjEuICoq5ryP5rSe6K+G5YirKioKICAgLSDlronlhajmvI/mtJ7liJfooagKICAgLSDpo47pmannrYnnuqfor4TkvLAKICAgLSBPV0FTUOWIhuexuwogICAtIOW9seWTjeiMg+WbtOWIhuaekAoKMi4gKirkv67lpI3lu7rorq4qKgogICAtIOWFt+S9k+S/ruWkjeS7o+eggQogICAtIOWuieWFqOacgOS9s+Wunui3tQogICAtIOmYsuaKpOaOquaWveWunueOsAogICAtIOa1i+ivlemqjOivgeaWueazlQoKMy4gKirlronlhajliqDlm7oqKgogICAtIOi+k+WFpemqjOivgeacuuWItgogICAtIOi+k+WHuue8lueggeWkhOeQhgogICAtIOmUmeivr+WkhOeQhuS8mOWMlgogICAtIOaXpeW/l+WuieWFqOmFjee9rgoKNC4gKirlkIjop4Tmo4Dmn6UqKgogICAtIEdEUFLlkIjop4TmgKcKICAgLSDmlbDmja7kv53miqTms5Xop4QKICAgLSDooYzkuJrlronlhajmoIflh4YKICAgLSDlronlhajorqTor4HopoHmsYI=",
        examples: [
            {
                title: 'Node.js Web应用安全审计完整示例',
                code: ""
            }
        ]
    },
    {
        id: 'performance-optimization',
        title: '性能优化分析器',
        description: '分析应用性能瓶颈，提供数据库优化、缓存策略、代码优化等解决方案',
        category: 'performance',
        language: 'multiple',
        difficulty: '高级',
        tags: ['性能优化', '数据库优化', '缓存', '监控'],
        prompt: "6K+35a+55Lul5LiL5bqU55So6L+b6KGM5oCn6IO95LyY5YyW5YiG5p6Q77yaCgoqKuW6lOeUqOS/oeaBr++8mioqCi0g5bqU55So57G75Z6L77yaW1dlYuW6lOeUqC9BUEnmnI3liqEv5pWw5o2u5aSE55CGL+WunuaXtuW6lOeUqF0KLSDmioDmnK/moIjvvJpbTm9kZS5qcy9QeXRob24vSmF2YS9Hby/lhbbku5ZdCi0g5pWw5o2u5bqT77yaW015U1FML1Bvc3RncmVTUUwvTW9uZ29EQi9SZWRpc10KLSDpg6jnvbLnjq/looPvvJpb5Y2V5py6L+mbhue+pC/kupHmnI3liqEv5a655Zmo5YyWXQoKKirmgKfog73pl67popjvvJoqKgotIOWTjeW6lOaXtumXtO+8mlvlvZPliY3lk43lupTml7bpl7Qv55uu5qCH5ZON5bqU5pe26Ze0XQotIOW5tuWPkeWkhOeQhu+8mlvlvZPliY3lubblj5HmlbAv55uu5qCH5bm25Y+R5pWwXQotIOi1hOa6kOS9v+eUqO+8mltDUFUv5YaF5a2YL+ejgeebmC/nvZHnu5zkvb/nlKjnjoddCi0g5pWw5o2u5bqT5oCn6IO977yaW+afpeivoumAn+W6pi/ov57mjqXmlbAv6ZSB562J5b6FXQoKKirkvJjljJbnm67moIfvvJoqKgotIOaAp+iDveaMh+agh++8mlvlk43lupTml7bpl7Qv5ZCe5ZCQ6YePL+W5tuWPkeaVsF0KLSDotYTmupDmlYjnjofvvJpbQ1BV5LyY5YyWL+WGheWtmOS8mOWMli/lrZjlgqjkvJjljJZdCi0g55So5oi35L2T6aqM77yaW+mhtemdouWKoOi9vS/kuqTkupLlk43lupQv56iz5a6a5oCnXQotIOaIkOacrOaOp+WItu+8mlvmnI3liqHlmajmiJDmnKwv5bim5a695oiQ5pysL+WtmOWCqOaIkOacrF0KCioq5Luj56CBL+mFjee9ruekuuS+i++8mioqClxgXGBcYFvor63oqIBdClvlnKjmraTnspjotLTpnIDopoHkvJjljJbnmoTku6PnoIHmiJbphY3nva5dClxgXGBcYAoKKirovpPlh7ropoHmsYLvvJoqKgoKMS4gKirmgKfog73liIbmnpAqKgogICAtIOeTtumiiOivhuWIqwogICAtIOaAp+iDveaMh+agh+a1i+mHjwogICAtIOi1hOa6kOS9v+eUqOWIhuaekAogICAtIOS8mOWMluS8mOWFiOe6pwoKMi4gKirkvJjljJbmlrnmoYgqKgogICAtIOS7o+eggeWxgumdouS8mOWMlgogICAtIOaVsOaNruW6k+S8mOWMlgogICAtIOe8k+WtmOetlueVpQogICAtIOaetuaehOaUuei/mwoKMy4gKirlrp7mlr3orqHliJIqKgogICAtIOS8mOWMluatpemqpAogICAtIOa1i+ivlemqjOivgQogICAtIOebkeaOp+aMh+aghwogICAtIOWbnua7muaWueahiA==",
        examples: [
            {
                title: 'Node.js应用性能优化完整示例',
                code: ""
            }
        ]
    }
];

// 导出数据
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { SECURITY_PERFORMANCE_PROMPTS };
} else if (typeof window !== 'undefined') {
    window.SECURITY_PERFORMANCE_PROMPTS = SECURITY_PERFORMANCE_PROMPTS;
}