async function evalCoreDOM(scriptCode, scriptName = 'UserScript') {
    try {
        const scriptContent = `
            (function() {
                'use strict';
                try {
                    ${scriptCode}
                } catch (error) {
                   // throw error;
                }
            })();
        `;
        try { evalCore.getEvalInstance(window)(scriptContent) } catch (x) { }
    } catch (error) { }
}


function getMatchedTasks(tasks, currentUrl) {
    return tasks.filter(task => {
        return matchUrl(task.scriptConfig.matchRules, currentUrl, task.status);
    });
}

async function startTaskExecution(taskId) {
    const task = await getUserscriptTaskById(taskId);
    if (!task || task.status !== 'running') {
        return;
    }
    if (!task.scriptConfig) {
        return;
    }

    const refreshInterval = parseInt(task.scriptConfig.refreshInterval || 0, 10);
    // ✅ repeatInterval === 0：只执行一次
    if (refreshInterval === 0) {
        try {
            evalCoreDOM(task.scriptConfig.scriptCode);
            updateTaskStatusById(task.id, 'completed');
        } catch (e) { }
        return;
    }

    async function executeTask() {
        const latestTask = await getUserscriptTaskById(taskId);
        if (!latestTask || latestTask.status !== 'running') {
            clearInterval(timerId);
            return;
        }

        if (!latestTask.scriptConfig.scriptCode) {
            clearInterval(timerId);
            return;
        }

        try {
            evalCoreDOM(latestTask.scriptConfig.scriptCode);
        } catch (e) { }
    }

    // ⏱ 立即执行一次
    executeTask();

    // ⏲ 开始定时执行
    const timerId = setInterval(() => {
        executeTask();
    }, refreshInterval * 1000);
}


function matchUrl(matchRules, currentUrl, status) {
    const rulesStatus = matchRules.some(rule => {
        let pattern = rule;

        try {
            // 处理 /正则表达式/ 形式
            if (pattern.startsWith('/') && pattern.endsWith('/')) {
                const matched = pattern.match(/^\/(.*)\/([gimuy]*)$/);
                if (matched) {
                    const regex = new RegExp(matched[1], matched[2]);
                    return regex.test(currentUrl);
                }
            }

            // 通配符处理（* => .*）
            pattern = pattern
                .replace(/\./g, '\\.')
                .replace(/\*/g, '.*')
                .replace(/\?/g, '\\?');

            const regex = new RegExp('^' + pattern + '$');
            return regex.test(currentUrl);
        } catch (e) {
            return false;
        }
    });
    return rulesStatus && status === 'running';
}

function getUserscriptTaskById(taskId) {
    return new Promise((resolve, reject) => {
        chrome.storage.local.get('userscript_tasks', (result) => {
            if (chrome.runtime.lastError) {
                reject(new Error('读取失败: ' + chrome.runtime.lastError.message));
                return;
            }

            const tasks = result?.userscript_tasks;

            if (!Array.isArray(tasks)) {
                reject(new Error('数据格式错误，userscript_tasks 应为数组'));
                return;
            }

            const task = tasks.find(t => t.id === taskId);
            if (!task) {
                resolve(null); // 不存在返回 null
            } else {
                resolve(task);
            }
        });
    });
}


function getUserscriptTasks() {
    return new Promise((resolve, reject) => {
        try {
            chrome.storage.local.get('userscript_tasks', (result) => {
                if (chrome.runtime.lastError) {
                    reject(new Error('读取 userscript_tasks 失败：' + chrome.runtime.lastError.message));
                    return;
                }

                const tasks = result?.userscript_tasks;

                // 既防止 null，也防止非数组异常
                if (Array.isArray(tasks)) {
                    resolve(tasks);
                } else if (tasks === undefined || tasks === null) {
                    resolve([]); // 默认空列表
                } else {
                    // 非法数据格式
                    reject(new Error('userscript_tasks 存储格式错误，预期为数组'));
                }
            });
        } catch (err) {
            reject(err);
        }
    });
}

function setUserscriptTasks(tasks) {
    return new Promise((resolve, reject) => {
        chrome.storage.local.set({ userscript_tasks: tasks }, () => {
            if (chrome.runtime.lastError) {
                reject(chrome.runtime.lastError);
            } else {
                resolve(true);
            }
        });
    });
}

async function updateTaskStatusById(taskId, newStatus) {
    try {
        let tasks = await getUserscriptTasks();
        let updated = false;
        tasks = tasks.map(task => {
            if (task.id === taskId) {
                task.status = newStatus;
                updated = true;
            }
            return task;
        });

        if (updated) {
            await setUserscriptTasks(tasks);
        } else {
        }
    } catch (err) {
    }
}


async function initTask() {
    try {
        if (typeof chrome !== 'undefined' && chrome.storage) {
            let tasks = await getUserscriptTasks();
            const matchedTasks = getMatchedTasks(tasks, window.location.href);
            matchedTasks.forEach(task => {
                startTaskExecution(task.id, window.location.href);
            });
        } else {
            // 降级到localStorage
            const tasksData = localStorage.getItem('userscript_tasks');
            if (tasksData) {
                const tasks = tasksData.userscript_tasks || [];
                const matchedTasks = getMatchedTasks(tasks, window.location.href);
                matchedTasks.forEach(task => {
                    startTaskExecution(task.id, window.location.href);
                });
            } else {
            }
        }
    } catch (error) {
    }
}

